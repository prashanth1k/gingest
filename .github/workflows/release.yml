name: Release

on:
  push:
    tags:
      - "v*" # Triggers on version tags like v1.0.0, v2.1.3, etc.

permissions:
  contents: write # Required for creating releases

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure Git line endings
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf
        shell: bash

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"
          cache: false # Disable automatic caching since we have no dependencies

      - name: Run tests
        run: |
          go test ./...
          go test -tags=integration -v

  build:
    name: Build and Release
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for git describe

      - name: Configure Git line endings
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf
        shell: bash

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"
          cache: false # Disable automatic caching since we have no dependencies

      - name: Get version info
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          COMMIT=$(git rev-parse --short HEAD)
          DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "commit=$COMMIT" >> $GITHUB_OUTPUT
          echo "date=$DATE" >> $GITHUB_OUTPUT

      - name: Build binaries
        run: |
          VERSION=${{ steps.version.outputs.version }}
          COMMIT=${{ steps.version.outputs.commit }}
          DATE=${{ steps.version.outputs.date }}

          LDFLAGS="-X main.Version=$VERSION -X main.GitCommit=$COMMIT -X main.BuildDate=$DATE"

          # Build for multiple platforms
          GOOS=linux GOARCH=amd64 go build -ldflags "$LDFLAGS" -o gingest-linux-amd64 cmd/gingest/main.go
          GOOS=linux GOARCH=arm64 go build -ldflags "$LDFLAGS" -o gingest-linux-arm64 cmd/gingest/main.go
          GOOS=darwin GOARCH=amd64 go build -ldflags "$LDFLAGS" -o gingest-darwin-amd64 cmd/gingest/main.go
          GOOS=darwin GOARCH=arm64 go build -ldflags "$LDFLAGS" -o gingest-darwin-arm64 cmd/gingest/main.go
          GOOS=windows GOARCH=amd64 go build -ldflags "$LDFLAGS" -o gingest-windows-amd64.exe cmd/gingest/main.go
          GOOS=windows GOARCH=arm64 go build -ldflags "$LDFLAGS" -o gingest-windows-arm64.exe cmd/gingest/main.go

      - name: Create checksums
        run: |
          sha256sum gingest-* > checksums.txt

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, '-') }}
          generate_release_notes: true
          files: |
            gingest-linux-amd64
            gingest-linux-arm64
            gingest-darwin-amd64
            gingest-darwin-arm64
            gingest-windows-amd64.exe
            gingest-windows-arm64.exe
            checksums.txt
          body: |
            ## Changes in ${{ steps.version.outputs.version }}

            ### Installation

            #### Using Go install
            ```bash
            go install github.com/prashanth1k/gingest/cmd/gingest@${{ steps.version.outputs.version }}
            ```

            #### Download Binary
            Download the appropriate binary for your platform from the assets below.

            #### Verify Download (Optional)
            ```bash
            sha256sum -c checksums.txt
            ```

            ### Build Information
            - **Version**: ${{ steps.version.outputs.version }}
            - **Git Commit**: ${{ steps.version.outputs.commit }}
            - **Build Date**: ${{ steps.version.outputs.date }}
            - **Go Version**: 1.21
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker:
    name: Build and Push Docker Image
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure Git line endings
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf
        shell: bash

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Get version info
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            prashanth1k/gingest:latest
            prashanth1k/gingest:${{ steps.version.outputs.version }}
          build-args: |
            VERSION=${{ steps.version.outputs.version }}
            COMMIT=${{ github.sha }}
            DATE=${{ github.event.head_commit.timestamp }}
