name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch: # Allow manual triggering from GitHub UI

jobs:
  test:
    name: Test
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        go-version: ["1.21", "1.22"]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure Git line endings
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf
        shell: bash

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}
          cache: false # Disable automatic caching since we have no dependencies

      - name: Cache Go modules (if go.sum exists)
        if: hashFiles('**/go.sum') != ''
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go-version }}-

      - name: Run unit tests
        run: go test -v ./...

      - name: Run integration tests
        run: go test -tags=integration -v

      - name: Run tests with race detector
        run: go test -race -v ./...

      - name: Check formatting
        run: |
          # Check if any files need formatting (ignore line endings)
          unformatted_files=$(gofmt -s -l .)
          if [ -n "$unformatted_files" ]; then
            echo "Code is not formatted properly. The following files need formatting:"
            echo "$unformatted_files"
            echo ""
            echo "Please run 'go fmt ./...' locally and commit the changes."
            echo ""
            echo "To fix formatting issues:"
            echo "  go fmt ./..."
            echo "  gofmt -s -w ."
            exit 1
          fi
          echo "Code formatting is correct"
        shell: bash

      - name: Run go vet
        run: go vet ./...

      - name: Run staticcheck (Linux only)
        if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.21'
        run: |
          go install honnef.co/go/tools/cmd/staticcheck@latest
          staticcheck ./...

  coverage:
    name: Coverage
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"
          cache: false # Disable automatic caching since we have no dependencies

      - name: Run tests with coverage
        run: go test -coverprofile=coverage.out ./...

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella
